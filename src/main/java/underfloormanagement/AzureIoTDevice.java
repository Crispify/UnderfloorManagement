package underfloormanagement;

import com.google.gson.JsonSyntaxException;
import com.microsoft.azure.sdk.iot.device.IotHubClientProtocol;
import com.microsoft.azure.sdk.iot.device.IotHubEventCallback;
import com.microsoft.azure.sdk.iot.device.IotHubStatusCode;
import com.microsoft.azure.sdk.iot.device.Message;
import com.microsoft.azure.sdk.iot.service.Device;
import com.microsoft.azure.sdk.iot.service.RegistryManager;
import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.log4j.ConsoleAppender;

public class AzureIoTDevice {

    private Device device = null;
    private com.microsoft.azure.sdk.iot.device.DeviceClient Client;
    private String deviceConnectionString = null;
    private static final int D2C_MESSAGE_TIMEOUT = 2000; // 2 seconds

    private static final String CONNECTION_STRING =         "HostName=Hispaniola21.azure-devices.net;SharedAccessKeyName=service;SharedAccessKey=/r9TYBGco2lxRNeZJG9VlKYTsUHN9qDRCYbnWGIg75E=";
    private static final String DEVICE_CONNECTION_STRING =  "HostName=Hispaniola21.azure-devices.net;DeviceId=%s;SharedAccessKey=%s";
            
    public AzureIoTDevice(String deviceId) throws IOException, URISyntaxException {

        RegistryManager registryManager = RegistryManager.createFromConnectionString(CONNECTION_STRING);

        // Create a device that's enabled by default, 
        // with an autogenerated key.
        try {
            device = Device.createFromId(deviceId, null, null);
            device = registryManager.addDevice(device);
        } catch (IllegalArgumentException | NoSuchAlgorithmException | JsonSyntaxException ex) {
            Logger.getLogger(AzureIoTDevice.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IotHubException e) {
            try {
                device = registryManager.getDevice(deviceId);
            } catch (IotHubException iotf) {
                Logger.getLogger(AzureIoTDevice.class.getName()).log(Level.SEVERE, null, iotf);

            }
        }

        // Display information about the device created.
        System.out.println("Device Id: " + device.getDeviceId());
        System.out.println("Device key: " + device.getPrimaryKey());

        ConsoleAppender console = new ConsoleAppender();
        String pattern = "%d [%p|%c|%C{1}] %m%n";
        console.setLayout(new org.apache.log4j.PatternLayout(pattern));
        console.setThreshold(org.apache.log4j.Level.WARN);
        console.activateOptions();
        org.apache.log4j.Logger.getRootLogger().addAppender(console);

        deviceConnectionString = String.format(DEVICE_CONNECTION_STRING, device.getDeviceId(), device.getPrimaryKey());
        Client = new com.microsoft.azure.sdk.iot.device.DeviceClient(deviceConnectionString, IotHubClientProtocol.HTTPS);
        Client.open();
    }

    public void logSomething(Object something) throws UnsupportedEncodingException, IOException {

        Message message = new Message(something.toString());
        message.setMessageId(java.util.UUID.randomUUID().toString());
        message.setExpiryTime(D2C_MESSAGE_TIMEOUT);
        System.out.println("Sending: " + something.toString());

        EventCallback callback = new EventCallback();

        Client.sendEventAsync(message, callback, message);
    }

    protected static class EventCallback implements IotHubEventCallback {
        @Override
        public void execute(IotHubStatusCode status, Object context) {
            Message msg = (Message) context;
            Logger.getLogger(AzureIoTDevice.class.getName()).log(Level.SEVERE, "IoT Hub responded to message " + msg.getMessageId() + " with status " + status.name());
        }
    }
}
